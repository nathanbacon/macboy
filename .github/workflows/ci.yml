name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install grcov
      run: cargo install grcov

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run tests with coverage
      run: |
        export RUSTFLAGS="-Cinstrument-coverage"
        export LLVM_PROFILE_FILE="cargo-test-%p-%m.profraw"
        cargo test --verbose

    - name: Generate coverage reports
      run: |
        grcov . --binary-path ./target/debug/deps/ -s . -t html --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o coverage-html/
        grcov . --binary-path ./target/debug/deps/ -s . -t cobertura --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o cobertura.xml

    - name: Upload coverage HTML as artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-html/
        retention-days: 30

    - name: Upload cobertura XML as artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-cobertura
        path: cobertura.xml
        retention-days: 30

    - name: Extract and display coverage
      run: |
        COVERAGE=$(grep -o 'line-rate="[0-9.]*"' cobertura.xml | head -1 | grep -o '[0-9.]*' | awk '{printf "%.1f", $1 * 100}')
        echo "üéØ Coverage: $COVERAGE%"
        echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = process.env.COVERAGE_PERCENTAGE;
          const runId = context.runId;
          const body = `## üìä Coverage Report
          
          **Line Coverage: ${coverage}%**
          
          üîç [Download detailed HTML coverage report](https://github.com/${{ github.repository }}/actions/runs/${runId})
          
          The coverage report is available as an artifact named \`coverage-report\` in this workflow run.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
